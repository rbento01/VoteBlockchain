/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ProjApp;

import blockChain.miner.remote.IminerRemote;
import blockChain.miner.remote.RemoteMiner;
import blockChain.miner.remote.RemoteMinierListener;
import blockchain.Block;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import myUtils.RMI;

/**
 *
 * @author Bernardo
 */
public class App extends javax.swing.JFrame implements RemoteMinierListener {

    /**
     * Creates new form App
     */
    //o nosso objeto remoto
    RemoteMiner myRemoteObject;
    
    //é a string que vai ser mostrada na GUI para mostrar quais utilizadores votaram na aplicação
    StringBuilder str = new StringBuilder();
    
    //é a string que vai ter dentro desta o número de cartão de cidadão de todos os utilizadores que já votaram
    ArrayList<String> voters = new ArrayList<String>();
    
    
    //a string que vai conter o número de cartão de cidadão e o partido em qual este votou
    String voto;

    public App() throws RemoteException {
        //vai começar a GUI
        initComponents();
        //centralizar janela
        setLocationRelativeTo(null); 
        //declarar que o user não pode editar o texto do textVoters
        textVoters.setEditable(false);
        //declarar que o user não pode visualizar a label gifMinar
        gifMinar.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPartido = new javax.swing.ButtonGroup();
        spMyServerPort = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textVoters = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        primNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ultiNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        numCC = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        radioPartido1 = new javax.swing.JRadioButton();
        radioPartido2 = new javax.swing.JRadioButton();
        radioPartido3 = new javax.swing.JRadioButton();
        radioPartido4 = new javax.swing.JRadioButton();
        radioPartido5 = new javax.swing.JRadioButton();
        radioPartido6 = new javax.swing.JRadioButton();
        buttonVotar = new javax.swing.JButton();
        buttonLimpar = new javax.swing.JButton();
        gifMinar = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        spMyServerPort1 = new javax.swing.JSpinner();
        btStartServer = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtServer = new javax.swing.JTextArea();
        iconServer = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtNetwork = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        txtServerAdress = new javax.swing.JTextField();
        btAddServer = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBlockchain = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        spMyServerPort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        spMyServerPort.setModel(new javax.swing.SpinnerNumberModel(1010, 1010, null, 1));
        spMyServerPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Port"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Voto Seguro 2.0");
        setBackground(new java.awt.Color(51, 51, 51));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jTabbedPane1.setBackground(new java.awt.Color(51, 51, 51));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel9.setBackground(new java.awt.Color(102, 102, 102));

        textVoters.setBackground(new java.awt.Color(0, 0, 0));
        textVoters.setColumns(20);
        textVoters.setForeground(new java.awt.Color(0, 153, 0));
        textVoters.setRows(5);
        jScrollPane2.setViewportView(textVoters);
        textVoters.getAccessibleContext().setAccessibleName("Ledger");
        textVoters.getAccessibleContext().setAccessibleParent(this);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setText("Ledger");

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        primNome.setBackground(new java.awt.Color(0, 0, 0));
        primNome.setForeground(new java.awt.Color(0, 153, 0));

        jLabel2.setText("Primeiro Nome");

        ultiNome.setBackground(new java.awt.Color(0, 0, 0));
        ultiNome.setForeground(new java.awt.Color(0, 153, 0));

        jLabel3.setText("Último Nome");

        numCC.setBackground(new java.awt.Color(0, 0, 0));
        numCC.setForeground(new java.awt.Color(0, 153, 0));
        numCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numCCKeyPressed(evt);
            }
        });

        jLabel4.setText("C.C.");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setText("___________________________");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4)
                        .addComponent(jLabel2)
                        .addComponent(primNome, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addComponent(ultiNome)
                        .addComponent(numCC))
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(primNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ultiNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel7))
        );

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        buttonPartido.add(radioPartido1);
        radioPartido1.setText("Partido Socialista");

        buttonPartido.add(radioPartido2);
        radioPartido2.setText("Partido Social Democrata");

        buttonPartido.add(radioPartido3);
        radioPartido3.setText("Bloco de Esquerda");

        buttonPartido.add(radioPartido4);
        radioPartido4.setText("CDS – Partido Popular");

        buttonPartido.add(radioPartido5);
        radioPartido5.setText("Partido Comunista Português");

        buttonPartido.add(radioPartido6);
        radioPartido6.setText("Pessoas–Animais–Natureza");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioPartido1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioPartido2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioPartido3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioPartido4, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioPartido5, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioPartido6, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(radioPartido1)
                .addGap(10, 10, 10)
                .addComponent(radioPartido2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(radioPartido3)
                .addGap(10, 10, 10)
                .addComponent(radioPartido4)
                .addGap(10, 10, 10)
                .addComponent(radioPartido5)
                .addGap(10, 10, 10)
                .addComponent(radioPartido6)
                .addGap(10, 10, 10))
        );

        buttonVotar.setBackground(new java.awt.Color(30, 30, 30));
        buttonVotar.setForeground(new java.awt.Color(204, 204, 204));
        buttonVotar.setText("Votar");
        buttonVotar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonVotar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVotarActionPerformed(evt);
            }
        });

        buttonLimpar.setBackground(new java.awt.Color(30, 30, 30));
        buttonLimpar.setForeground(new java.awt.Color(204, 204, 204));
        buttonLimpar.setText("Limpar");
        buttonLimpar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimparActionPerformed(evt);
            }
        });

        gifMinar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blockchain/gui/images/dogMine.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(buttonVotar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(gifMinar, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gifMinar))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonVotar)
                            .addComponent(buttonLimpar))))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel9, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Client", jPanel5);

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));
        jPanel6.setLayout(new java.awt.BorderLayout());

        spMyServerPort1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        spMyServerPort1.setModel(new javax.swing.SpinnerNumberModel(1010, 1010, null, 1));
        spMyServerPort1.setBorder(javax.swing.BorderFactory.createTitledBorder("Port"));

        btStartServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blockchain/gui/images/start.png"))); // NOI18N
        btStartServer.setText("Start Server");
        btStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartServerActionPerformed(evt);
            }
        });

        txtServer.setEditable(false);
        txtServer.setBackground(new java.awt.Color(0, 0, 0));
        txtServer.setColumns(20);
        txtServer.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtServer.setForeground(new java.awt.Color(255, 0, 102));
        txtServer.setRows(5);
        jScrollPane4.setViewportView(txtServer);

        iconServer.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        iconServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blockchain/gui/images/working128.gif"))); // NOI18N
        iconServer.setText("123456789123");
        iconServer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        iconServer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btStartServer, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(spMyServerPort1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iconServer)))
                .addGap(16, 16, 16))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btStartServer, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spMyServerPort1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(iconServer, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel6.add(jPanel7, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Server", jPanel6);

        jPanel4.setLayout(new java.awt.BorderLayout());

        txtNetwork.setColumns(20);
        txtNetwork.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        txtNetwork.setRows(5);
        jScrollPane5.setViewportView(txtNetwork);

        jPanel4.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel8.setBackground(new java.awt.Color(102, 102, 102));

        txtServerAdress.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtServerAdress.setText("//192.168.1.131:1010/miner");
        txtServerAdress.setBorder(javax.swing.BorderFactory.createTitledBorder("Adress"));

        btAddServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blockchain/gui/images/add-server-icon.png"))); // NOI18N
        btAddServer.setText("Add  Server");
        btAddServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btAddServer, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                    .addComponent(txtServerAdress))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtServerAdress, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAddServer, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.add(jPanel8, java.awt.BorderLayout.WEST);

        jTabbedPane1.addTab("Network", jPanel4);

        txtBlockchain.setEditable(false);
        txtBlockchain.setColumns(20);
        txtBlockchain.setRows(5);
        jScrollPane1.setViewportView(txtBlockchain);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Blockchain", jPanel10);

        jLabel1.setFont(new java.awt.Font("OCR A Extended", 1, 36)); // NOI18N
        jLabel1.setText("Voto Seguro");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel6))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonVotarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVotarActionPerformed
        // TODO add your handling code here:
        //vai obter a quantidade de números que foram inseridos no campo da inserção do cartão do cidadão
        String numChars = numCC.getText();
        //vai obter a quantidade de letras que foram inseridos no campo da inserção do primeiro nome
        String numCharsPrim = primNome.getText();
        //vai obter a quantidade de letras que foram inseridos no campo da inserção do último nome
        String numCharsUlti = ultiNome.getText();
        
        //declarar quantos zeros é que é suposto fazer a encriptação
        int zeros = 4;
        
        //verificar se o user preencheu os campos necessários, caso contrário aparece um aviso para preencher
        if (numChars.length() == 8 && numCharsPrim.length() > 0 && numCharsUlti.length() > 0) {
            try {
                //vai buscar à blockchain quem já votou na aplicação
                voters = myRemoteObject.chainVote.getData();
                //System.out.println("Voters: " + voters);
                //verifica se o user colocou um cartão de cidadão que já foi usado para votar, caso aconteca, aparece uma caixa de erro a declarar que o user com aquele cartão de cidadão já votou
                if (!voters.contains((String) numCC.getText())) {
                    
                    //inicializa a string voto
                    String vote = null;
                    
                    //Vai iterar para todos os botões
                    for (Enumeration<AbstractButton> buttons = buttonPartido.getElements(); buttons.hasMoreElements();) {
                        AbstractButton button = buttons.nextElement();
                        
                        //se o user clicou num botão
                        if (button.isSelected()) {
                            //a variável vote vai passar a ter o texto que se encontra no botão
                            vote = button.getText();
                        }
                    }
                    // se não clicou em nenhum botão, é considerado um botão nulo
                    if (vote == null) {
                        //a variável vote vai passar a ter o valor de voto branco
                        vote = "Voto Branco";
                    }
                    
                    //aparece uma janela de confirmação a indicar se o user tem a certeza que quer votar no partido selecionado
                    int confirm = JOptionPane.showConfirmDialog(this, "Tem a certeza que quer votar em: " + vote, "Confirmação do voto", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    
                    //caso clique que sim na janela de confirmação
                    if (confirm == JOptionPane.YES_OPTION) {
                        
                        // #################### VOTOS ##############################
                        //vai sumarizar a string
                        vote = switch (vote) {
                            case "Partido Socialista" ->
                                "PS";
                            case "Partido Social Democrata" ->
                                "PSD";
                            case "Bloco de Esquerda" ->
                                "BE";
                            case "CDS – Partido Popular" ->
                                "CDS";
                            case "Partido Comunista Português" ->
                                "PCP";
                            case "Pessoas–Animais–Natureza" ->
                                "PAN";
                            default ->
                                "Branco";
                        };
                        
                        //voto vai passar a ter o valor do cartão de cidadão o partido em que fez o voto e o hash do último bloco
                        voto = numCC.getText() + " " + vote + " " + myRemoteObject.chainVote.getLastBlock();
                        
                        //indica que o objeto remoto e quaisquer a estes ligados podem começar a minerar com a informação dada
                        myRemoteObject.startMining(voto, zeros);
                        
                        //atualiza o ledger, mostrando o cartão de cidadão da pessoa que acaba de votar
                        textChanger();
                        
                        //limpa os campos de inserção de dados
                        cleanInterface();

                    } else {
                        //limpa os campos de inserção de dados
                        cleanInterface();
                    }
                } else {
                    //limpa os campos de inserção de dados
                    cleanInterface();
                    //caso já votou 
                    JOptionPane.showMessageDialog(this, "Já votou!");
                }

            } catch (Exception ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //caso não insira dados corretos
            JOptionPane.showMessageDialog(this, "Por favor insira todos os dados corretamente");
        }
    }//GEN-LAST:event_buttonVotarActionPerformed

    private void buttonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimparActionPerformed
        // TODO add your handling code here:
        //limpa os campos de inserção de dados
        cleanInterface();
    }//GEN-LAST:event_buttonLimparActionPerformed

    private void numCCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numCCKeyPressed
        // TODO add your handling code here:
        
        //vai buscar o digito que o utilizador clicou
        char c = evt.getKeyChar();
        
        //vai buscar o texto do campo do CC
        String numero = numCC.getText();
        
        //se o user colocou um número ou clicou no backspace 
        if ((c >= '0' && c <= '9') || (c == KeyEvent.VK_BACK_SPACE)) {
            //declara que o campo do cc pode ser editado
            numCC.setEditable(true);
        } else {
            //declara que o campo do cc não pode ser editado
            numCC.setEditable(false);
            //caso o user não clique só em números 
            JOptionPane.showMessageDialog(rootPane, "Apenas sao aceites numeros");
            //declara que o campo do cc pode ser editado
            numCC.setEditable(true);
        }
        //se o utilizador colocor 8 números já não pode colocar mais
        if (numero.length() == 8) {
            //declara que o campo do cc não pode ser editado
            numCC.setEditable(false);
        }
    }//GEN-LAST:event_numCCKeyPressed


    private void btAddServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddServerActionPerformed
        try {
            //declaração do objeto remoto
            IminerRemote remoteObject = (IminerRemote) RMI.getRemote(txtServerAdress.getText());
            //adiciona o objeto remoto 
            myRemoteObject.addNode(remoteObject);
        } catch (Exception ex) {
            txtNetwork.setText("\nERROR " + ex.getMessage());
        }
    }//GEN-LAST:event_btAddServerActionPerformed

    private void btStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartServerActionPerformed

        try {
            //vai buscar o texto da caixa de texto que está para ser o port
            int port = (Integer) spMyServerPort1.getValue();
            //cria-se o objeto remoto
            myRemoteObject = new RemoteMiner(port, this);
            //inicializa o objeto remoto
            RMI.startRemoteObject(myRemoteObject, port, IminerRemote.NAME);
            
            //vai buscar todos os CC's dos votadores
            voters = myRemoteObject.chainVote.getData();
            //vai fazer o método load, o que este faz é criar uma blockchain a partir de um ficheiro
            myRemoteObject.load();
            //atualiza a gui
            textChanger();
            //inicializa o port de escuta para android
            votoAndroid(port);
        } catch (Exception ex) {
            addToLog("\nERROR " + ex.getMessage());
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btStartServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new App().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddServer;
    private javax.swing.JButton btStartServer;
    private javax.swing.JButton buttonLimpar;
    private javax.swing.ButtonGroup buttonPartido;
    private javax.swing.JButton buttonVotar;
    private javax.swing.JLabel gifMinar;
    private javax.swing.JLabel iconServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField numCC;
    private javax.swing.JTextField primNome;
    private javax.swing.JRadioButton radioPartido1;
    private javax.swing.JRadioButton radioPartido2;
    private javax.swing.JRadioButton radioPartido3;
    private javax.swing.JRadioButton radioPartido4;
    private javax.swing.JRadioButton radioPartido5;
    private javax.swing.JRadioButton radioPartido6;
    private javax.swing.JSpinner spMyServerPort;
    private javax.swing.JSpinner spMyServerPort1;
    private javax.swing.JTextArea textVoters;
    private javax.swing.JTextArea txtBlockchain;
    private javax.swing.JTextArea txtNetwork;
    private javax.swing.JTextArea txtServer;
    private javax.swing.JTextField txtServerAdress;
    private javax.swing.JTextField ultiNome;
    // End of variables declaration//GEN-END:variables
//

    public void votoAndroid(int port) {
        new Thread(
                () -> {
                    try {

                        //int port = (int) spPort.getValue();
                        //inicializa o port de escuta
                        int porta = port + 9000;
                        //começa um socket com o port dado
                        ServerSocket server = new ServerSocket(porta);
                        
                        //loop infinito
                        while (true) {
                            //adiciona à gui que está à escuta na porta 
                            addToLog("Server waiting at port " + porta);
                            //abre a socket do cliente
                            Socket client = server.accept();
                            //diz a qual IP e port o servidor está à escuta
                            addToLog("Connected to " + client.getInetAddress() + ":" + client.getPort());
                            //socket do server
                            ObjectInputStream in = new ObjectInputStream(client.getInputStream());
                            //socket do cliente
                            ObjectOutputStream out = new ObjectOutputStream(client.getOutputStream());
                            
                            //Vai ser o CC que o user colocou + o partido que o user meteu no telemóvel
                            String msg = (String) in.readObject();
                            //passa para tudo para maiusculas
                            msg = msg.toUpperCase();

                            //obtém o cc que foi enviado pelo android
                            String ccAndroid = msg.substring(0, 8);
                            
                            //se o cc que o user do android colocou ainda não está na lista de cc's que já votaram
                            if (!voters.contains(ccAndroid)) {
                                //afirma que está a processar o pedido
                                addToLog("Processing " + client.getInetAddress() + ":" + client.getPort() + " " + msg);
                                //envia a string de volta
                                out.writeObject(msg);
                                //limpa 
                                out.flush();
                                //fecha a conexão
                                client.close();
                                
                                //a variável string vai ter o CC do user, o partido e o hash do last block
                                voto = msg + " " + myRemoteObject.chainVote.getLastBlock();
                                
                                //declara que todos os objetos remotos começam a minerar com a informação dada
                                myRemoteObject.startMining(voto, 4);
                                //afirma que já acabou de fazer a mineração
                                addToLog("Service done " + client.getInetAddress() + ":" + client.getPort());
                            } else {
                                //se o cc já está na lista dos cc's que já votaram, a string msg passa a ter o valor de "Já votou!"
                                msg = "Já votou!";
                                //envia a string para o cliente android
                                out.writeObject(msg);
                                //limpa
                                out.flush();
                                //fecha a conexão
                                client.close();
                            }
                        }
                    } catch (Exception ex) {
                        addToLog("\nERROR " + ex.getMessage());
                        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        ).start();
    }

    private void cleanInterface() {
        //limpa os dados
        numCC.setText("");
        primNome.setText("");
        ultiNome.setText("");
        buttonPartido.clearSelection();
    }

    private void addToLog(String msg) {
        //escreve na gui
        txtServer.setText(msg + "\n" + txtServer.getText());
        txtServer.setCaretPosition(0);
    }

    private void textChanger() throws FileNotFoundException {
        //vai criar a lista de pessoas que já votaram
        voters = myRemoteObject.chainVote.getData();
        //apaga tudo
        str.delete(0, str.length());
        
        //apaga o texto todo
        textVoters.setText("");
        
        //para cada CC de votadores
        for (int i = 0; i < voters.size(); i++) {
            //coloca no Arraylist str o valor do cc do votador
            str.append(voters.get(i)).append("\n");
        }
        //System.out.println("Voters: " + str.toString());
        //declara que o conteúdo do arraylist passa a ser o valor que se encontra no textVoters
        textVoters.setText(str.toString());
        
        //nome do ficheiro
        String filName = "VoteChain.txt";
        //declaração e inicialização do scanner
        Scanner file = new Scanner(new File(filName));
        //enquanto que o ficheiro tenha conteúdo
        while (file.hasNext()) {
            //ler uma linha
            String line = file.nextLine();
            //partir a linha nos elementos
            String[] elem = line.split("\n");
            //para cada linha 
            for (String string : elem) {
                //passa cada linha para o ecrã
                txtBlockchain.setText(string + "\n");
            }
        }
    }

    @Override
    public void onStartMining(String message, int zeros) {
        //torna elementos visiveis e invisiveis
        iconServer.setVisible(true);
        gifMinar.setVisible(true);
        txtServer.append("\nMining " + message + "[ " + zeros + "]");
        buttonVotar.setEnabled(false);
    }

    @Override
    public void onStopMining(String message, int nonce) {
        try {
            //torna elementos visiveis e invisiveis
            iconServer.setVisible(false);
            buttonVotar.setEnabled(true);
            gifMinar.setVisible(false);
            textChanger();

        } catch (Exception ex) {
            Logger.getLogger(App.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void onMining(int number) {
        //simboliza qual número que está a passar como o possivel nonce
        iconServer.setText(number + "");
    }

    @Override
    public void onNounceFound(int nonce, String voto) {
        try {
            //declara qual objeto remoto conseguiu encontrar o nonce
            txtServer.append("\nWinner " + nonce);
            //declara que todos os outros objetos remotos podem para de minerar
            myRemoteObject.stopMining(nonce);
            //o botão de votar passa a ser enabled
            buttonVotar.setEnabled(true);

//                System.out.println("Mensagem: " + name);
            //declaração e inicialização do block
            Block block = new Block(nonce, voto, myRemoteObject.chainVote.getLastBlock());
//                System.out.println("Nonce: " + nonce);
            //vai obter o hash que o objeto remoto encontrou
            String hash = myRemoteObject.getHash();
            //declara que o hash do block criado vai ser o encontrado
            block.setHash(hash);
//                System.out.println("Hash: " + hash);
            //para todos os objetos remotos
            for (IminerRemote node : myRemoteObject.getNetwork()) {
                //para todos os objetos remotos adiciona o bloco
                node.addBlock(block);
            }

//            System.out.println("Voterchain: " + blockchain.toString());
            //System.out.println("Voters: " + voters);
            //guarda a blockchain no ficheiro
            myRemoteObject.chainVote.save("VoteChain.txt");
            //atualiza a GUI
            textChanger();
        } catch (RemoteException ex) {
            txtServer.append(ex.getMessage());
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void onStart(IminerRemote miner) {
        try {
            //torna elementos visiveis e invisiveis
            btStartServer.setVisible(false);
            iconServer.setVisible(false);
            txtServer.append("\nRunning at \n" + miner.getAdress());
        } catch (RemoteException ex) {
            txtServer.append("\nERROR " + ex.getMessage());
        }
    }

    @Override
    public void onAddNode(IminerRemote ir) {
        try {
            //cria uma nova string builder
            StringBuilder txt = new StringBuilder();
            //para todos os objetos remotos
            for (IminerRemote node : myRemoteObject.getNetwork()) {
                //vai buscar o endereço do objeto remoto
                txt.append(node.getAdress() + "\n");
            }
            //muda o texto to txtNetwork para o endereço do objeto remoto
            txtNetwork.setText(txt.toString());
        } catch (RemoteException ex) {
            txtNetwork.setText("\nERROR " + ex.getMessage());
        }
    }

    @Override
    public void updateVoters() {
        try {
            //atualiza a GUI
            textChanger();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
